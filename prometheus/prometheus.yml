# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]

  - job_name: 'ignite-metrics'
    static_configs:
      - targets: ['ignite-0.ignite.ignite.svc.cluster.local:9002', 'ignite-1.ignite.ignite.svc.cluster.local:9002']

    metric_relabel_configs:
      # --- cache ---
      - source_labels: [__name__]
        regex: "(cache)_(.+)_(CacheSize)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cache)_(.+)_(CacheSize)'
        replacement: '${1}_${3}'
        target_label: __name__
      - source_labels: [__name__]
        regex: "(cache)_(.+)_(CacheHits)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cache)_(.+)_(CacheHits)'
        replacement: '${1}_${3}'
        target_label: __name__
      - source_labels: [__name__]
        regex: "(cache)_(.+)_(CacheGets)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cache)_(.+)_(CacheGets)'
        replacement: '${1}_${3}'
        target_label: __name__
      - source_labels: [__name__]
        regex: "(cache)_(.+)_(CachePuts)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cache)_(.+)_(CachePuts)'
        replacement: '${1}_${3}'
        target_label: __name__
      - source_labels: [__name__]
        regex: "(cache)_(.+)_(CacheMisses)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cache)_(.+)_(CacheMisses)'
        replacement: '${1}_${3}'
        target_label: __name__
      - source_labels: [__name__]
        regex: "(cache)_(.+)_(OffHeapEntriesCount)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cache)_(.+)_(OffHeapEntriesCount)'
        replacement: '${1}_${3}'
        target_label: __name__
      # --- cacheGroups ----
      - source_labels: [__name__]
        regex: "(cacheGroups)_(.+)_(TotalAllocatedSize)"
        replacement: "$2"
        target_label: "cache_name"
      - source_labels: [__name__]
        regex: '(cacheGroups)_(.+)_(TotalAllocatedSize)'
        replacement: '${1}_${3}'
        target_label: __name__

